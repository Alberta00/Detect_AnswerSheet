# main.py ‚Äî ‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å‡∏Ç‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏ö OMR
import os, sys, subprocess
from pathlib import Path

from PySide6.QtWidgets import (
    QApplication, QMainWindow, QWidget, QPushButton, QLabel,
    QVBoxLayout, QHBoxLayout, QMessageBox
)
from PySide6.QtCore import Qt, QProcess, QUrl
from PySide6.QtGui import QDesktopServices

APP_DIR = Path(__file__).resolve().parent

# ---- ‡∏ï‡∏±‡∏ß‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏õ‡∏¥‡∏î‡πÑ‡∏ü‡∏•‡πå/‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢ ----
def open_dir(path: Path):
    path.mkdir(parents=True, exist_ok=True)
    QDesktopServices.openUrl(QUrl.fromLocalFile(str(path)))

class MainMenu(QMainWindow):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("OMR System ‚Äî Main Menu")
        self.resize(720, 420)

        title = QLabel("OMR Answer Sheet ‚Äî Main Menu")
        title.setAlignment(Qt.AlignCenter)
        title.setStyleSheet("font-size: 22px; font-weight: 700; padding: 8px;")

        # ‡∏õ‡∏∏‡πà‡∏°‡∏´‡∏•‡∏±‡∏Å
        btn_checker = QPushButton("üìù ‡∏ï‡∏£‡∏ß‡∏à‡∏Ç‡πâ‡∏≠‡∏™‡∏≠‡∏ö (Open Checker)")
        btn_checker.setMinimumHeight(44)
        btn_checker.clicked.connect(self.open_checker)

        btn_summary = QPushButton("üìä ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô (Open Summary)")
        btn_summary.setMinimumHeight(44)
        btn_summary.clicked.connect(self.open_summary)

        btn_grid = QPushButton("üß© ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Grid / Template")
        btn_grid.setMinimumHeight(44)
        btn_grid.clicked.connect(self.open_grid_editor)

        btn_out = QPushButton("üìÇ ‡πÄ‡∏õ‡∏¥‡∏î‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå (out/)")
        btn_out.setMinimumHeight(40)
        btn_out.clicked.connect(lambda: open_dir(APP_DIR / "out"))

        btn_exit = QPushButton("‚ùå ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°")
        btn_exit.setMinimumHeight(40)
        btn_exit.clicked.connect(self.close)

        # ‡πÄ‡∏Ñ‡πâ‡∏≤‡πÇ‡∏Ñ‡∏£‡∏á
        col = QVBoxLayout()
        col.addWidget(title)
        col.addSpacing(6)
        col.addWidget(btn_checker)
        col.addWidget(btn_summary)
        col.addWidget(btn_grid)

        col.addSpacing(10)
        row = QHBoxLayout()
        row.addWidget(btn_out)
        row.addWidget(btn_exit)
        col.addLayout(row)

        wrap = QWidget()
        wrap.setLayout(col)
        wrap.setStyleSheet("""
    QMainWindow, QWidget { background: white; color: black; }
    QLabel { color: #111; }
    QTextEdit { background: #f9f9f9; color: #111; border: 1px solid #ccc; }
    QPushButton {
        background: #f2f2f2; color: #111; border: 1px solid #d0d0d0;
        padding: 8px 12px; border-radius: 10px; font-weight: 600;
    }
    QPushButton:hover { background: #e9e9e9; }
    QPushButton:pressed { background: #dddddd; }
""")
        self.setCentralWidget(wrap)

        # ‡∏Å‡∏±‡∏ô GC: ‡πÄ‡∏Å‡πá‡∏ö‡∏£‡∏µ‡πÄ‡∏ü‡∏≠‡πÄ‡∏£‡∏ô‡∏ã‡πå‡∏´‡∏ô‡πâ‡∏≤‡∏•‡∏π‡∏Å
        self._child_windows = []

    # ---------- ‡πÄ‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡∏£‡∏ß‡∏à ----------
    def open_checker(self):
        """
        ‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏° import Detect.MainWindow ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÉ‡∏´‡πâ‡∏£‡∏±‡∏ô Detect.py ‡πÄ‡∏õ‡πá‡∏ô‡πÇ‡∏õ‡∏£‡πÄ‡∏ã‡∏™‡πÉ‡∏´‡∏°‡πà
        """
        try:
            import Detect  # ‡∏ï‡πâ‡∏≠‡∏á‡∏≠‡∏¢‡∏π‡πà‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô
            win = Detect.MainWindow()
            win.show()
            self._child_windows.append(win)
        except Exception as e:
            # fallback: ‡πÄ‡∏õ‡∏¥‡∏î‡πÑ‡∏ü‡∏•‡πå Detect.py ‡πÄ‡∏õ‡πá‡∏ô‡πÇ‡∏õ‡∏£‡πÄ‡∏ã‡∏™‡πÉ‡∏´‡∏°‡πà‡∏Ç‡∏≠‡∏á Python
            det_path = APP_DIR / "Detect.py"
            if not det_path.exists():
                QMessageBox.critical(self, "‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå", f"‡∏´‡∏≤ Detect.py ‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠‡∏ó‡∏µ‡πà\n{det_path}")
                return
            QProcess.startDetached(sys.executable, [str(det_path)])

    # ---------- ‡πÄ‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏™‡∏£‡∏∏‡∏õ ----------
    def open_summary(self):
        try:
            import Detect
            win = Detect.SummaryWindow()
            win.show()
            self._child_windows.append(win)
        except Exception as e:
            det_path = APP_DIR / "Detect.py"
            if not det_path.exists():
                QMessageBox.critical(self, "‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå", f"‡∏´‡∏≤ Detect.py ‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠‡∏ó‡∏µ‡πà\n{det_path}")
                return
            # ‡πÉ‡∏´‡πâ Detect.py ‡πÄ‡∏õ‡∏¥‡∏î Summary ‡πÄ‡∏≠‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ ‡∏à‡∏∂‡∏á‡∏£‡∏±‡∏ô Detect ‡πÅ‡∏•‡πâ‡∏ß‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Å‡∏î‡πÄ‡∏õ‡∏¥‡∏î‡∏™‡∏£‡∏∏‡∏õ‡∏à‡∏≤‡∏Å‡πÉ‡∏ô‡πÅ‡∏≠‡∏û‡πÑ‡∏î‡πâ
            QProcess.startDetached(sys.executable, [str(det_path)])

    # ---------- ‡πÄ‡∏õ‡∏¥‡∏î Grid/Template Editor ----------
    def open_grid_editor(self):
        """
        ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á‡∏Å‡∏≤‡∏£‡∏û‡∏∂‡πà‡∏á‡∏û‡∏≤‡∏Ñ‡∏•‡∏≤‡∏™/‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏•‡∏≤‡∏™‡πÉ‡∏ô Grid.py (‡∏ã‡∏∂‡πà‡∏á‡∏≠‡∏≤‡∏à‡∏ï‡πà‡∏≤‡∏á‡∏à‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏î)
        ‡πÉ‡∏ä‡πâ‡∏ß‡∏¥‡∏ò‡∏µ‡πÄ‡∏õ‡∏¥‡∏î Grid.py ‡πÄ‡∏õ‡πá‡∏ô‡πÇ‡∏õ‡∏£‡πÄ‡∏ã‡∏™ Python ‡πÅ‡∏¢‡∏Å
        """
        grid_path = APP_DIR / "Grid.py"
        if not grid_path.exists():
            QMessageBox.critical(self, "‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå", f"‡∏´‡∏≤ Grid.py ‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠‡∏ó‡∏µ‡πà\n{grid_path}")
            return
        QProcess.startDetached(sys.executable, [str(grid_path)])

def main():
    app = QApplication(sys.argv)
    w = MainMenu()
    w.show()
    sys.exit(app.exec())

if __name__ == "__main__":
    main()
